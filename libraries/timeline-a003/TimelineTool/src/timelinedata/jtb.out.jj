//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(TimelineDataParser)
package timelinedata;

import timelinedata.syntaxtree.*;
import java.util.Vector;


public class TimelineDataParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(TimelineDataParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

TOKEN :
{
   <VARIABLE: "Variable">
   | <VERTEX: "Vertex">
   | <FPS: "FPS">
   | <LPAREN: "(">
   | <RPAREN: ")">
   | <EQUALS: "=">
   | <PLAYBACK: "Playback">
   | <REALTIME: "Real-time">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
   | <FLOATING_POINT_LITERAL: ("-")? (["0"-"9"])+ "." (["0"-"9"])*>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   NodeOptional n0 = new NodeOptional();
   OptionList n1;
   NodeListOptional n2 = new NodeListOptional();
   Variable n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      n1=OptionList()
      { n0.addNode(n1); }
   )?
   (
      n3=Variable()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5=<EOF> { 
      n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
   }
   
   { return new Goal(n0,n2,n4); }
}

OptionList OptionList() :
{
   NodeList n0 = new NodeList();
   Option n1;

   
}
{
   (
      n1=Option()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new OptionList(n0); }
}

Option Option() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   PlaybackChoice n4;

   
}
{
   n1="Playback" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=PlaybackChoice()
   
   { return new Option(n0,n2,n4); }
}

PlaybackChoice PlaybackChoice() :
{
   NodeChoice n0;
   PlaybackChoiceFrames n1;
   PlaybackChoiceTime n2;

   
}
{
   (
      n1=PlaybackChoiceFrames()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PlaybackChoiceTime()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new PlaybackChoice(n0); }
}

PlaybackChoiceFrames PlaybackChoiceFrames() :
{
   IntegerLiteral n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=IntegerLiteral()
   n2="FPS" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new PlaybackChoiceFrames(n0,n1); }
}

PlaybackChoiceTime PlaybackChoiceTime() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="Real-time" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PlaybackChoiceTime(n0); }
}

Variable Variable() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeList n3 = new NodeList();
   Vertex n4;

   
}
{
   n1="Variable" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   (
      n4=Vertex()
      { n3.addNode(n4); }
   )+
   { n3.nodes.trimToSize(); }
   
   { return new Variable(n0,n2,n3); }
}

Vertex Vertex() :
{
   NodeToken n0;
   Token n1;
   FloatingPointLiteral n2;
   FloatingPointLiteral n3;
   FloatingPointLiteral n4;
   FloatingPointLiteral n5;
   FloatingPointLiteral n6;
   FloatingPointLiteral n7;

   
}
{
   n1="Vertex" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FloatingPointLiteral()
   n3=FloatingPointLiteral()
   n4=FloatingPointLiteral()
   n5=FloatingPointLiteral()
   n6=FloatingPointLiteral()
   n7=FloatingPointLiteral()
   
   { return new Vertex(n0,n2,n3,n4,n5,n6,n7); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

FloatingPointLiteral FloatingPointLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<FLOATING_POINT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FloatingPointLiteral(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}
