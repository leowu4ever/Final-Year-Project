//
// Generated by JTB 1.3.2
//

package timelinedata.visitor;
import timelinedata.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * nodeOptional -> ( OptionList() )?
    * nodeListOptional -> ( Variable() )*
    * nodeToken -> <EOF>
    */
   public void visit(Goal n) {
      n.nodeOptional.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeToken.accept(this);
   }

   /**
    * nodeList -> ( Option() )+
    */
   public void visit(OptionList n) {
      n.nodeList.accept(this);
   }

   /**
    * nodeToken -> "Playback"
    * nodeToken1 -> "="
    * playbackChoice -> PlaybackChoice()
    */
   public void visit(Option n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.playbackChoice.accept(this);
   }

   /**
    * nodeChoice -> PlaybackChoiceFrames()
    *       | PlaybackChoiceTime()
    */
   public void visit(PlaybackChoice n) {
      n.nodeChoice.accept(this);
   }

   /**
    * integerLiteral -> IntegerLiteral()
    * nodeToken -> "FPS"
    */
   public void visit(PlaybackChoiceFrames n) {
      n.integerLiteral.accept(this);
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "Real-time"
    */
   public void visit(PlaybackChoiceTime n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "Variable"
    * identifier -> Identifier()
    * nodeList -> ( Vertex() )+
    */
   public void visit(Variable n) {
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeList.accept(this);
   }

   /**
    * nodeToken -> "Vertex"
    * floatingPointLiteral -> FloatingPointLiteral()
    * floatingPointLiteral1 -> FloatingPointLiteral()
    * floatingPointLiteral2 -> FloatingPointLiteral()
    * floatingPointLiteral3 -> FloatingPointLiteral()
    * floatingPointLiteral4 -> FloatingPointLiteral()
    * floatingPointLiteral5 -> FloatingPointLiteral()
    */
   public void visit(Vertex n) {
      n.nodeToken.accept(this);
      n.floatingPointLiteral.accept(this);
      n.floatingPointLiteral1.accept(this);
      n.floatingPointLiteral2.accept(this);
      n.floatingPointLiteral3.accept(this);
      n.floatingPointLiteral4.accept(this);
      n.floatingPointLiteral5.accept(this);
   }

   /**
    * nodeToken -> <IDENTIFIER>
    */
   public void visit(Identifier n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> <FLOATING_POINT_LITERAL>
    */
   public void visit(FloatingPointLiteral n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n) {
      n.nodeToken.accept(this);
   }

}
