//
// Generated by JTB 1.3.2
//

package timeline;

/**
 * Grammar production:
 * nodeToken -> "Vertex"
 * floatingPointLiteral -> FloatingPointLiteral()
 * floatingPointLiteral1 -> FloatingPointLiteral()
 * floatingPointLiteral2 -> FloatingPointLiteral()
 * floatingPointLiteral3 -> FloatingPointLiteral()
 * floatingPointLiteral4 -> FloatingPointLiteral()
 * floatingPointLiteral5 -> FloatingPointLiteral()
 */
public class Vertex implements Node {
   public NodeToken nodeToken;
   public FloatingPointLiteral floatingPointLiteral;
   public FloatingPointLiteral floatingPointLiteral1;
   public FloatingPointLiteral floatingPointLiteral2;
   public FloatingPointLiteral floatingPointLiteral3;
   public FloatingPointLiteral floatingPointLiteral4;
   public FloatingPointLiteral floatingPointLiteral5;

   public Vertex(NodeToken n0, FloatingPointLiteral n1, FloatingPointLiteral n2, FloatingPointLiteral n3, FloatingPointLiteral n4, FloatingPointLiteral n5, FloatingPointLiteral n6) {
      nodeToken = n0;
      floatingPointLiteral = n1;
      floatingPointLiteral1 = n2;
      floatingPointLiteral2 = n3;
      floatingPointLiteral3 = n4;
      floatingPointLiteral4 = n5;
      floatingPointLiteral5 = n6;
   }

   public Vertex(FloatingPointLiteral n0, FloatingPointLiteral n1, FloatingPointLiteral n2, FloatingPointLiteral n3, FloatingPointLiteral n4, FloatingPointLiteral n5) {
      nodeToken = new NodeToken("Vertex");
      floatingPointLiteral = n0;
      floatingPointLiteral1 = n1;
      floatingPointLiteral2 = n2;
      floatingPointLiteral3 = n3;
      floatingPointLiteral4 = n4;
      floatingPointLiteral5 = n5;
   }

   public void accept(timeline.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(timeline.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(timeline.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(timeline.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

